"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[2784],{5330:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"education/prompts/PRD/functional-requirements","title":"Functional Requirements","description":"Functional requirements of the PRD","source":"@site/docs/education/02-prompts/01-PRD/14-functional-requirements.mdx","sourceDirName":"education/02-prompts/01-PRD","slug":"/education/prompts/PRD/functional-requirements","permalink":"/vibe-labs/docs/education/prompts/PRD/functional-requirements","draft":false,"unlisted":false,"editUrl":"https://github.com/EliFuzz/vibe-labs/docs/education/02-prompts/01-PRD/14-functional-requirements.mdx","tags":[],"version":"current","sidebarPosition":14,"frontMatter":{"title":"Functional Requirements","description":"Functional requirements of the PRD","hide_table_of_contents":true},"sidebar":"education","previous":{"title":"Product Requirements","permalink":"/vibe-labs/docs/education/prompts/PRD/product-requirements"},"next":{"title":"Technical Requirements","permalink":"/vibe-labs/docs/education/prompts/PRD/technical-requirements"}}');var r=t(3420),s=t(8906);const a={title:"Functional Requirements",description:"Functional requirements of the PRD",hide_table_of_contents:!0},o=void 0,u={},c=[];function d(e){const n={code:"code",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-markdown",children:"# Functional Requirements\n\n## Purpose\n\nDefine comprehensive functional requirements that specify what the product must do to deliver the defined value proposition. This section translates user needs and product vision into specific, testable requirements.\n\n## Prerequisites\n\n- Product vision and value proposition defined\n- User personas and journeys completed\n- Problem statement established\n- Technical constraints understood\n\n## Section Structure & Requirements\n\n### 1. Requirements Overview\n\n**Objective**: Provide high-level view of functional requirements\n\n**Required Elements:**\n\n- **Requirements Philosophy**: Approach to defining requirements\n- **Scope Definition**: What's included and excluded from requirements\n- **Requirement Categories**: How requirements are organized\n- **Prioritization Framework**: How requirements are prioritized\n- **Traceability Matrix**: How requirements trace to user needs and business goals\n\n**Quality Criteria:**\n\n- Clear scope boundaries established\n- Prioritization framework is objective and consistent\n- Requirements are traceable to user needs\n- Organization facilitates understanding and implementation\n\n**Template:**\n[\n\n## Functional Requirements Overview\n\n### Requirements Philosophy\n\n[Approach to defining and managing requirements]\n\n### Scope Definition\n\n**In Scope**: [What's included in this version]\n**Out of Scope**: [What's explicitly excluded]\n**Future Scope**: [What's planned for future versions]\n\n### Requirement Categories\n\n[How requirements are organized - by user type, feature area, etc.]\n\n### Prioritization Framework\n\n[How requirements are prioritized - MoSCoW, Kano, etc.]\n\n### Traceability Matrix\n\n[How requirements trace to user needs and business goals]\n[\n\n### 2. Core Functional Requirements\n\n**Objective**: Define essential product capabilities\n\n**Required Elements for Each Requirement:**\n\n- **Requirement ID**: Unique identifier for tracking\n- **Requirement Title**: Clear, descriptive title\n- **User Story**: Requirement expressed as user story\n- **Acceptance Criteria**: Specific, testable criteria\n- **Priority Level**: Must-have, should-have, could-have, won't-have\n- **User Persona**: Which personas this serves\n- **Business Value**: Why this requirement matters\n- **Dependencies**: Other requirements this depends on\n- **Assumptions**: Assumptions underlying the requirement\n\n**Quality Criteria:**\n\n- Requirements are specific, measurable, and testable\n- User stories follow standard format and are complete\n- Acceptance criteria are unambiguous\n- Priority levels are consistently applied\n- Dependencies are accurately identified\n\n**Template for Each Requirement:**\n[\n\n### [REQ-ID] [Requirement Title]\n\n**User Story**: As a [user type], I want [functionality] so that [benefit].\n\n**Acceptance Criteria**:\n\n- [ ] [Specific, testable criterion 1]\n- [ ] [Specific, testable criterion 2]\n- [ ] [Specific, testable criterion 3]\n\n**Priority**: [Must/Should/Could/Won't Have]\n**User Persona**: [Primary persona this serves]\n**Business Value**: [Why this requirement matters]\n**Dependencies**: [Other requirements this depends on]\n**Assumptions**: [Underlying assumptions]\n**Effort Estimate**: [Development effort estimate]\n[\n\n### 3. Feature Specifications\n\n**Objective**: Group requirements into coherent features\n\n**Required Elements for Each Feature:**\n\n- **Feature Overview**: Purpose and scope of feature\n- **Feature Requirements**: All requirements that comprise the feature\n- **Feature User Flows**: How users interact with the feature\n- **Feature Dependencies**: Other features this depends on\n- **Feature Success Metrics**: How feature success will be measured\n- **Feature Risks**: Potential risks and mitigation strategies\n\n**Template:**\n[\n\n## Feature: [Feature Name]\n\n### Feature Overview\n\n[Purpose and scope of feature]\n\n### Feature Requirements\n\n[List of all requirements that comprise this feature]\n\n### User Flows\n\n[How users interact with this feature]\n\n### Dependencies\n\n[Other features this depends on]\n\n### Success Metrics\n\n[How feature success will be measured]\n\n### Risks and Mitigation\n\n[Potential risks and mitigation strategies]\n[\n\n### 4. Integration Requirements\n\n**Objective**: Define how product integrates with external systems\n\n**Required Elements:**\n\n- **Integration Overview**: Summary of all required integrations\n- **API Requirements**: Specifications for APIs that must be consumed or provided\n- **Data Exchange Requirements**: What data needs to be exchanged and how\n- **Authentication Requirements**: How integrations will be secured\n- **Performance Requirements**: Performance expectations for integrations\n- **Error Handling Requirements**: How integration failures will be handled\n\n### 5. Data Requirements\n\n**Objective**: Specify data needs and management requirements\n\n**Required Elements:**\n\n- **Data Model**: Key data entities and relationships\n- **Data Sources**: Where data comes from\n- **Data Quality Requirements**: Standards for data accuracy and completeness\n- **Data Retention Requirements**: How long data must be kept\n- **Data Privacy Requirements**: Privacy and protection requirements\n- **Data Migration Requirements**: How existing data will be migrated\n\n### 6. Business Rules and Logic\n\n**Objective**: Define business rules that govern product behavior\n\n**Required Elements:**\n\n- **Business Rules Catalog**: All business rules that apply\n- **Rule Priorities**: How conflicting rules are resolved\n- **Rule Exceptions**: When and how rules can be overridden\n- **Rule Validation**: How rules are validated and enforced\n- **Rule Changes**: How business rules can be modified\n\n## Information Gathering Requirements\n\n### Functional Context Needed:\n\n- User workflows and processes\n- Business rules and constraints\n- Integration requirements and constraints\n- Data requirements and sources\n- Performance and scalability needs\n\n### Validation Requirements:\n\n- User validation of requirements and user stories\n- Technical validation of feasibility\n- Business validation of value and priority\n- Stakeholder review and approval\n\n## Cross-Reference Requirements\n\n### Must Reference:\n\n- User personas and their goals\n- Product vision and value proposition\n- Technical constraints and capabilities\n- Business objectives and success criteria\n\n### Must Support:\n\n- Technical architecture decisions\n- User experience design\n- Testing and quality assurance plans\n- Implementation planning and estimation\n\n## Common Pitfalls to Avoid\n\n### Requirements Definition Pitfalls:\n\n- **Solution specification**: Specifying how instead of what\n- **Requirement inflation**: Adding unnecessary complexity\n- **Ambiguous language**: Using vague or interpretable terms\n- **Missing edge cases**: Not considering error conditions and exceptions\n\n### User Story Pitfalls:\n\n- **Technical user stories**: Writing stories from system perspective\n- **Epic user stories**: Stories that are too large to implement\n- **Missing acceptance criteria**: Not defining how to test the story\n- **Persona mismatch**: Stories that don't match defined personas\n\n### Prioritization Pitfalls:\n\n- **Everything is high priority**: Not making hard prioritization decisions\n- **Feature bias**: Prioritizing features over user value\n- **Technical debt ignorance**: Not accounting for technical requirements\n- **Stakeholder politics**: Letting politics drive prioritization\n\n## Edge Case Considerations\n\n### When Requirements are Uncertain:\n\n- Use assumption-driven development approach\n- Plan for rapid validation and iteration\n- Build flexibility into architecture\n- Document uncertainty and validation plans\n\n### When Users Have Conflicting Needs:\n\n- Prioritize based on business value and user impact\n- Consider configurable solutions\n- Plan phased approach to address different needs\n- Document trade-offs and decisions\n\n### When Technical Constraints Limit Requirements:\n\n- Work with technical team to understand constraints\n- Identify alternative approaches to meet user needs\n- Plan technical debt reduction to enable future requirements\n- Document constraints and their impact\n\n## Validation Checkpoints\n\n### Before Finalizing Section:\n\n- [ ] All requirements are specific, measurable, and testable\n- [ ] User stories follow standard format and are complete\n- [ ] Acceptance criteria are unambiguous and complete\n- [ ] Priority levels are consistently applied\n- [ ] Dependencies are accurately identified and documented\n\n### Cross-Section Validation:\n\n- [ ] Requirements support product vision and value proposition\n- [ ] Requirements address identified user needs and pain points\n- [ ] Requirements are technically feasible given constraints\n- [ ] Requirements can be delivered within timeline and budget\n- [ ] Requirements support defined success metrics\n\n## Output Quality Standards\n\n- Requirements are clear, complete, and unambiguous\n- User stories are well-formed and testable\n- Prioritization is objective and well-justified\n- Dependencies and assumptions are clearly documented\n- Content enables accurate estimation and planning\n"})})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8906:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6672);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);