"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[6555],{3437:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"education/prompts/PRD/product-requirements","title":"Product Requirements","description":"Product requirements for the PRD","source":"@site/docs/education/02-prompts/01-PRD/13-product-requirements.mdx","sourceDirName":"education/02-prompts/01-PRD","slug":"/education/prompts/PRD/product-requirements","permalink":"/vibe-labs/docs/education/prompts/PRD/product-requirements","draft":false,"unlisted":false,"editUrl":"https://github.com/EliFuzz/vibe-labs/docs/education/02-prompts/01-PRD/13-product-requirements.mdx","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"title":"Product Requirements","description":"Product requirements for the PRD","hide_table_of_contents":true},"sidebar":"education","previous":{"title":"Success Metrics","permalink":"/vibe-labs/docs/education/prompts/PRD/success-metrics"},"next":{"title":"Functional Requirements","permalink":"/vibe-labs/docs/education/prompts/PRD/functional-requirements"}}');var r=i(3420),a=i(8906);const s={title:"Product Requirements",description:"Product requirements for the PRD",hide_table_of_contents:!0},o=void 0,c={},u=[];function l(e){const n={code:"code",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-markdown",children:"# Product Requirements\n\n## Purpose\n\nGenerate comprehensive, actionable product requirements that translate user needs and business objectives into specific, measurable, and implementable features and capabilities. This section serves as the primary specification for development teams.\n\n## Required Information\n\nBefore generating this section, ensure you have:\n\n- [ ] User research insights and persona definitions\n- [ ] Business objectives and success criteria\n- [ ] Technical constraints and platform requirements\n- [ ] Competitive analysis and market positioning\n- [ ] Stakeholder requirements and priorities\n- [ ] Regulatory and compliance requirements\n\n## Section Structure\n\n### 1. Requirements Overview & Principles\n\n**Template:**\n\n**Requirements Philosophy**: [Approach to requirement definition and prioritization]\n**Design Principles**: [Core principles guiding product decisions]\n**Success Criteria**: [How requirement success will be measured]\n**Requirement Categories**: [Functional, non-functional, business, technical]\n**Prioritization Framework**: [Method for ranking requirements]\n\n**Requirements:**\n\n- Clear requirements philosophy and approach\n- Defined design principles for decision-making\n- Measurable success criteria for each requirement\n- Comprehensive requirement categorization\n- Transparent prioritization methodology\n\n**Design Principles Examples:**\n\n- User-first: Always prioritize user value over internal convenience\n- Simplicity: Choose the simplest solution that meets user needs\n- Accessibility: Ensure product is usable by people with disabilities\n- Performance: Maintain fast, responsive user experience\n- Security: Protect user data and privacy by default\n- Scalability: Build for future growth and expansion\n\n**Validation Questions:**\n\n- Do principles provide clear guidance for difficult decisions?\n- Are success criteria specific and measurable?\n- Is the prioritization framework objective and repeatable?\n\n### 2. Functional Requirements\n\n#### 2.1 Core Features\n\n**Template for each feature:**\n\n**Feature**: [Feature Name]\n**Priority**: [Must-Have/Should-Have/Could-Have/Won't-Have]\n**User Story**: As a [user type], I want [capability] so that [benefit]\n**Acceptance Criteria**:\n\n- [Specific, testable criterion 1]\n- [Specific, testable criterion 2]\n- [Specific, testable criterion 3]\n  **Business Rationale**: [Why this feature is important]\n  **User Value**: [Specific benefit to users]\n  **Dependencies**: [Other features or systems required]\n  **Assumptions**: [Key assumptions this feature relies on]\n\n**Requirements:**\n\n- Clear, specific feature descriptions\n- User-centered story format\n- Testable acceptance criteria\n- Business justification for each feature\n- Explicit dependency mapping\n- Documented assumptions\n\n**Feature Categories to Consider:**\n\n- Core functionality (primary user workflows)\n- User management (registration, authentication, profiles)\n- Content management (creation, editing, organization)\n- Search and discovery (finding and filtering content)\n- Communication (messaging, notifications, sharing)\n- Analytics and reporting (insights and data visualization)\n- Administration (settings, configuration, management)\n- Integration (APIs, third-party connections)\n\n#### 2.2 User Interface Requirements\n\n**Template:**\n\n**Interface Type**: [Web, mobile, desktop, API]\n**Key Screens/Views**: [List of primary interface elements]\n**Navigation Requirements**: [How users move through the product]\n**Responsive Design**: [Multi-device support requirements]\n**Accessibility Standards**: [WCAG compliance level and specific requirements]\n**Branding Guidelines**: [Visual identity and style requirements]\n\n**Requirements:**\n\n- Comprehensive interface specification\n- Clear navigation and information architecture\n- Multi-device and responsive design requirements\n- Accessibility compliance standards\n- Brand consistency guidelines\n\n#### 2.3 Data Requirements\n\n**Template:**\n\n**Data Types**: [Categories of data the product will handle]\n**Data Sources**: [Where data comes from - user input, APIs, imports]\n**Data Storage**: [How data will be stored and organized]\n**Data Processing**: [How data will be manipulated and analyzed]\n**Data Export**: [How users can extract their data]\n**Data Retention**: [How long data is kept and archival policies]\n\n**Requirements:**\n\n- Complete data model specification\n- Clear data flow and processing requirements\n- User data ownership and portability\n- Data lifecycle management\n- Backup and recovery requirements\n\n### 3. Non-Functional Requirements\n\n#### 3.1 Performance Requirements\n\n**Template:**\n\n**Response Time**: [Maximum acceptable response times for key operations]\n**Throughput**: [Number of concurrent users or transactions supported]\n**Scalability**: [Growth capacity and scaling requirements]\n**Availability**: [Uptime requirements and acceptable downtime]\n**Resource Usage**: [Memory, CPU, storage, bandwidth constraints]\n\n**Specific Metrics Examples:**\n\n- Page load time: < 3 seconds on 3G connection\n- API response time: < 500ms for 95% of requests\n- Concurrent users: Support 10,000 simultaneous users\n- Uptime: 99.9% availability (8.76 hours downtime/year)\n- Database queries: < 100ms for 90% of queries\n\n#### 3.2 Security Requirements\n\n**Template:**\n\n**Authentication**: [User verification requirements]\n**Authorization**: [Access control and permission systems]\n**Data Protection**: [Encryption and data security measures]\n**Privacy**: [User privacy protection and data handling]\n**Compliance**: [Regulatory requirements - GDPR, HIPAA, etc.]\n**Audit**: [Logging and monitoring requirements]\n\n**Security Considerations:**\n\n- Multi-factor authentication options\n- Role-based access control (RBAC)\n- Data encryption at rest and in transit\n- Regular security audits and penetration testing\n- Incident response and breach notification procedures\n- User consent and data processing transparency\n\n#### 3.3 Usability Requirements\n\n**Template:**\n\n**Ease of Use**: [Learnability and efficiency requirements]\n**Error Prevention**: [How to prevent and handle user errors]\n**Help & Documentation**: [Support and guidance requirements]\n**Accessibility**: [Inclusive design requirements]\n**Internationalization**: [Multi-language and localization support]\n\n**Usability Metrics:**\n\n- Time to complete key tasks\n- Error rates and recovery time\n- User satisfaction scores\n- Accessibility compliance testing\n- Localization coverage and quality\n\n#### 3.4 Compatibility Requirements\n\n**Template:**\n\n**Browser Support**: [Supported browsers and versions]\n**Device Support**: [Supported devices and screen sizes]\n**Operating Systems**: [Supported OS versions]\n**Integration Requirements**: [Third-party system compatibility]\n**Legacy Support**: [Backward compatibility requirements]\n\n### 4. Business Requirements\n\n#### 4.1 Business Rules\n\n**Template:**\n\n**Rule**: [Business rule description]\n**Rationale**: [Why this rule exists]\n**Implementation**: [How the rule should be enforced]\n**Exceptions**: [When the rule doesn't apply]\n**Validation**: [How to verify rule compliance]\n\n**Business Rule Categories:**\n\n- User eligibility and access rules\n- Content approval and moderation policies\n- Pricing and billing rules\n- Data retention and deletion policies\n- Workflow and approval processes\n\n#### 4.2 Compliance Requirements\n\n**Template:**\n\n**Regulation**: [Specific regulation or standard]\n**Applicability**: [Which parts of the product are affected]\n**Requirements**: [Specific compliance requirements]\n**Implementation**: [How compliance will be achieved]\n**Validation**: [How compliance will be verified]\n**Documentation**: [Required compliance documentation]\n\n**Common Compliance Areas:**\n\n- Data privacy (GDPR, CCPA, PIPEDA)\n- Accessibility (ADA, WCAG, Section 508)\n- Industry-specific (HIPAA, SOX, PCI-DSS)\n- International standards (ISO 27001, SOC 2)\n\n### 5. Technical Requirements\n\n#### 5.1 Platform Requirements\n\n**Template:**\n\n**Architecture**: [High-level technical architecture]\n**Technology Stack**: [Programming languages, frameworks, databases]\n**Infrastructure**: [Hosting, cloud services, CDN requirements]\n**APIs**: [Required integrations and API specifications]\n**Development Tools**: [Required development and deployment tools]\n\n#### 5.2 Integration Requirements\n\n**Template:**\n\n**Integration**: [System or service to integrate with]\n**Purpose**: [Why integration is needed]\n**Data Exchange**: [What data is shared and how]\n**Authentication**: [How systems authenticate with each other]\n**Error Handling**: [How integration failures are managed]\n**Performance**: [Integration performance requirements]\n\n### 6. Requirement Prioritization\n\n#### 6.1 MoSCoW Prioritization\n\n**Template:**\n\n**Must-Have (Critical)**:\n\n- [Requirement 1]: [Rationale for critical priority]\n- [Requirement 2]: [Rationale for critical priority]\n\n**Should-Have (Important)**:\n\n- [Requirement 3]: [Rationale for important priority]\n- [Requirement 4]: [Rationale for important priority]\n\n**Could-Have (Nice-to-Have)**:\n\n- [Requirement 5]: [Rationale for nice-to-have priority]\n- [Requirement 6]: [Rationale for nice-to-have priority]\n\n**Won't-Have (Out of Scope)**:\n\n- [Requirement 7]: [Rationale for exclusion]\n- [Requirement 8]: [Rationale for exclusion]\n\n#### 6.2 Value vs. Effort Matrix\n\n**Template:**\n\n**High Value, Low Effort (Quick Wins)**:\n\n- [Requirements that provide maximum ROI]\n\n**High Value, High Effort (Major Projects)**:\n\n- [Requirements that are strategic but resource-intensive]\n\n**Low Value, Low Effort (Fill-ins)**:\n\n- [Requirements that are easy to implement]\n\n**Low Value, High Effort (Avoid)**:\n\n- [Requirements that should be deprioritized]\n\n### 7. Requirements Traceability\n\n**Template:**\n\n**Requirement ID**: [Unique identifier]\n**Source**: [User need, business objective, or constraint that drives this requirement]\n**Stakeholder**: [Who requested or benefits from this requirement]\n**Related Requirements**: [Dependencies and relationships]\n**Test Cases**: [How this requirement will be validated]\n**Implementation Status**: [Current development status]\n\n## Quality Criteria\n\n### Requirement Quality (SMART Criteria)\n\n- [ ] **Specific**: Clear, unambiguous description of what is required\n- [ ] **Measurable**: Quantifiable success criteria and acceptance tests\n- [ ] **Achievable**: Technically and practically feasible\n- [ ] **Relevant**: Aligned with user needs and business objectives\n- [ ] **Time-bound**: Clear timeline and milestone expectations\n\n### Additional Quality Checks\n\n- [ ] **Complete**: All necessary requirements identified\n- [ ] **Consistent**: No contradictory requirements\n- [ ] **Verifiable**: Can be tested and validated\n- [ ] **Traceable**: Clear connection to source needs\n- [ ] **Prioritized**: Clear importance ranking\n\n## Cross-Reference Requirements\n\nEnsure alignment with:\n\n- **User Research**: Requirements address identified user needs\n- **Product Overview**: Requirements support product vision and goals\n- **Technical Specifications**: Requirements are technically feasible\n- **Success Metrics**: Requirements support measurable outcomes\n- **Implementation Plan**: Requirements align with development capacity\n- **Risk Assessment**: Requirements consider identified risks\n\n## Information Gathering Questions\n\nIf requirement details are missing, ask:\n\n### Functional Requirements\n\n1. What are the core user workflows and tasks?\n2. What features are absolutely essential vs. nice-to-have?\n3. How should users interact with the product?\n4. What data does the product need to collect and process?\n\n### Non-Functional Requirements\n\n5. What are the performance expectations?\n6. What security and privacy requirements exist?\n7. What devices and browsers must be supported?\n8. What accessibility requirements apply?\n\n### Business Requirements\n\n9. What business rules and policies must be enforced?\n10. What regulatory compliance is required?\n11. What are the budget and timeline constraints?\n12. What integrations are required?\n\n### Technical Requirements\n\n13. What technical constraints exist?\n14. What systems must the product integrate with?\n15. What scalability requirements exist?\n16. What development and deployment requirements apply?\n\n## Common Pitfalls to Avoid\n\n### Requirement Definition Pitfalls\n\n- **Vague requirements**: Using ambiguous language that can be interpreted multiple ways\n- **Solution-focused**: Describing how instead of what (requirements should be solution-agnostic)\n- **Unmeasurable criteria**: Acceptance criteria that can't be objectively tested\n- **Missing edge cases**: Failing to consider error conditions and unusual scenarios\n- **Scope creep**: Adding requirements without proper evaluation and prioritization\n\n### Prioritization Pitfalls\n\n- **Everything is high priority**: Failing to make difficult prioritization decisions\n- **Stakeholder bias**: Prioritizing based on who asks loudest rather than user value\n- **Technical bias**: Prioritizing easy-to-build over high-value features\n- **Feature factory**: Focusing on feature quantity over user outcomes\n- **Ignoring constraints**: Prioritizing without considering resource limitations\n\n## Edge Case Handling\n\n### Conflicting Requirements\n\n- Document the conflict clearly\n- Identify stakeholders affected by each option\n- Analyze trade-offs and implications\n- Propose compromise solutions\n- Escalate to decision-makers with recommendations\n\n### Uncertain Requirements\n\n- Mark requirements as assumptions\n- Plan for validation through prototyping or user testing\n- Create multiple requirement scenarios\n- Build in flexibility for requirement changes\n- Schedule regular requirement reviews\n\n### Technical Constraints\n\n- Work with technical teams to understand limitations\n- Explore alternative approaches to meet user needs\n- Consider phased implementation strategies\n- Document technical debt and future improvement plans\n- Balance ideal requirements with practical constraints\n\n### Regulatory Requirements\n\n- Consult with legal and compliance teams\n- Research applicable regulations thoroughly\n- Plan for regulatory approval processes\n- Consider international regulatory variations\n- Build compliance into core product design\n\n## Validation Checklist\n\nBefore finalizing, verify:\n\n- [ ] **Completeness**: All necessary requirements identified\n- [ ] **Clarity**: Requirements are unambiguous and specific\n- [ ] **Testability**: Acceptance criteria are measurable\n- [ ] **Feasibility**: Requirements are technically achievable\n- [ ] **Traceability**: Requirements link to user needs and business goals\n- [ ] **Prioritization**: Requirements are properly ranked and justified\n\n## Output Format\n\nmarkdown\n\n# Product Requirements\n\n## Requirements Overview & Principles\n\n[Requirements philosophy and principles]\n\n## Functional Requirements\n\n### Core Features\n\n[Detailed feature requirements]\n\n### User Interface Requirements\n\n[UI/UX requirements]\n\n### Data Requirements\n\n[Data handling requirements]\n\n## Non-Functional Requirements\n\n### Performance Requirements\n\n[Performance specifications]\n\n### Security Requirements\n\n[Security and privacy requirements]\n\n### Usability Requirements\n\n[Usability and accessibility requirements]\n\n### Compatibility Requirements\n\n[Platform and integration requirements]\n\n## Business Requirements\n\n### Business Rules\n\n[Business logic and rules]\n\n### Compliance Requirements\n\n[Regulatory and compliance needs]\n\n## Technical Requirements\n\n### Platform Requirements\n\n[Technical architecture requirements]\n\n### Integration Requirements\n\n[System integration specifications]\n\n## Requirement Prioritization\n\n[Prioritized requirement lists]\n\n## Requirements Traceability\n\n[Requirement tracking and relationships]\n\n---\n\n_Requirements version: [Version number]_\n_Last updated: [Date]_\n_Next review: [Scheduled review date]_\n\n## Success Indicators\n\nSuccessful product requirements should:\n\n- Provide clear, actionable guidance for development teams\n- Enable accurate project estimation and planning\n- Support effective testing and quality assurance\n- Facilitate stakeholder alignment and decision-making\n- Serve as a contract between business and development teams\n"})})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8906:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var t=i(6672);const r={},a=t.createContext(r);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);